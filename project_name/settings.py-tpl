"""
Django settings for {{ project_name }} project.

Generated by 'django-admin startproject' using Django {{ django_version }}.

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""

from pathlib import Path

import distutils.util
import os
import ssl
import urllib.parse
import urllib3

def get_setting(setting, *args, list_sep=None, fxn=None):
    """
    Function to retrieve value for specified setting.
    """
    value = os.getenv(setting, *args)
    if list_sep is not None:
        value = [e.strip() for e in value.split(list_sep) if e.strip()]
    if value is not None and fxn == bool:
        try:
            value = bool(distutils.util.strtobool(value))
        except AttributeError:
            value = [bool(distutils.util.strtobool(e)) for e in value]
    elif value is not None and fxn is not None:
        try:
            value = fxn(value)
        except ValueError as e:
            value = list(map(fxn, value))
    return value

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_setting('SECRET_KEY',
                         # TODO: remove default value in production
                         '{{ secret_key }}')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_setting('DEBUG', 'False', fxn=bool)

ALLOWED_HOSTS = get_setting('ALLOWED_HOSTS', '', list_sep=',')
USE_X_FORWARDED_HOST = get_setting('USE_X_FORWARDED_HOST', 'False', fxn=bool)
USE_X_FORWARDED_PORT = get_setting('USE_X_FORWARDED_PORT', 'False', fxn=bool)


# Application definition

# TODO: add your installed app
INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'drf_yasg',
    'mozilla_django_oidc',
    'rest_framework',
    'rest_framework.authtoken',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mozilla_django_oidc.middleware.SessionRefresh',
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'


# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases

DB_NAME = get_setting('DB_NAME')
DB_HOST = get_setting('DB_HOST')
DB_PORT = get_setting('DB_PORT', fxn=int)
DB_SCHEMA = get_setting('DB_SCHEMA')
DB_USER = get_setting('DB_USER')
DB_PASSWORD = get_setting('DB_PASSWORD')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    #'default': {
    #    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #    'OPTIONS': {
    #        'options': f'-c search_path="{DB_SCHEMA}"'
    #    },
    #    'NAME': DB_NAME,
    #    'USER': DB_USER,
    #    'PASSWORD': DB_PASSWORD,
    #    'HOST': DB_HOST,
    #    'PORT': DB_PORT,
    #},
}


# Password validation
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/

LANGUAGE_CODE = get_setting('LANGUAGE_CODE', 'en-us')
TIME_ZONE = get_setting('TIME_ZONE', 'US/Eastern')
USE_I18N = get_setting('USE_I18N', 'True', fxn=bool)
USE_L10N = get_setting('USE_L10N', 'True', fxn=bool)
USE_TZ = get_setting('USE_TZ', 'True', fxn=bool)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/

STATICFILES_STORAGE = '{{ project_name }}.storage_backends.StaticStorage'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    '{{ project_name }}.oidc.OIDCAuthenticationBackend',
)


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'mozilla_django_oidc.contrib.drf.OIDCAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination'
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic'
        },
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
    'USE_SESSION_AUTH': False
}

CORS_ALLOW_CREDENTIALS = get_setting('CORS_ALLOW_CREDENTIALS', 'False', fxn=bool)
CORS_ORIGIN_ALLOW_ALL = get_setting('CORS_ORIGIN_ALLOW_ALL', 'False', fxn=bool)
CORS_ORIGIN_WHITELIST = get_setting('CORS_ORIGIN_WHITELIST', '', list_sep=',')

CSRF_COOKIE_DOMAIN = get_setting('CSRF_COOKIE_DOMAIN')
CSRF_TRUSTED_ORIGINS = get_setting('CSRF_TRUSTED_ORIGINS', '', list_sep=',')

OIDC_RP_CLIENT_ID = get_setting('OIDC_RP_CLIENT_ID')
OIDC_RP_CLIENT_SECRET = get_setting('OIDC_RP_CLIENT_SECRET')
OIDC_RP_SIGN_ALGO = get_setting('OIDC_RP_SIGN_ALGO', 'RS256')
OIDC_RP_SCOPES = get_setting('OIDC_RP_SCOPES', 'openid')
OIDC_OP_JWKS_ENDPOINT = get_setting('OIDC_OP_JWKS_ENDPOINT')
OIDC_OP_AUTHORIZATION_ENDPOINT = get_setting('OIDC_OP_AUTHORIZATION_ENDPOINT')
OIDC_OP_TOKEN_ENDPOINT = get_setting('OIDC_OP_TOKEN_ENDPOINT')
OIDC_OP_USER_ENDPOINT = get_setting('OIDC_OP_USER_ENDPOINT')
OIDC_OP_LOGOUT_ENDPOINT = get_setting('OIDC_OP_LOGOUT_ENDPOINT')

def base_url(base_url):
    base_url = Path(base_url).as_posix()
    if base_url == '.': base_url = ''
    return base_url

BASE_URL = get_setting('BASE_URL', '.', fxn=base_url)
LOGIN_REDIRECT_URL = (Path('/') / Path(BASE_URL) \
                     / Path(get_setting('LOGIN_REDIRECT_URL',
                                        'admin'))).as_posix()
LOGIN_REDIRECT_URL = f'{LOGIN_REDIRECT_URL}/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'task': {
            'class': '{{ project_name }}.formatters.TaskFormatter',
            'format': '%(asctime)s [%(task_id)s|%(task_name)s|%(process)d|%(thread)d|%(module)s|%(name)s|%(funcName)s|%(lineno)d] %(levelname)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'task'
        }
    },
    'loggers': {
        '{{ project_name }}': {
            'handlers': ['console'],
            'level': get_setting('LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        # TODO: change "app" to the name of your installed app
        'app': {
            'handlers': ['console'],
            'level': get_setting('LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': get_setting('LOG_LEVEL_DJANGO', 'INFO'),
            'propagate': False,
        },
        'celery': {
            'handlers': ['console'],
            'level': get_setting('LOG_LEVEL_CELERY', 'INFO'),
            'propagate': False,
        },
    }
}

USE_SSL = get_setting('USE_SSL', 'False', fxn=bool)
VERIFY_SSL = get_setting('VERIFY_SSL', 'False', fxn=bool)
if not VERIFY_SSL:
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
CA_BUNDLE = get_setting('CA_BUNDLE')

AWS_DEFAULT_ACL = None
AWS_ACCESS_KEY_ID = get_setting('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = get_setting('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = get_setting('AWS_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = get_setting('AWS_S3_ENDPOINT_URL')
AWS_S3_SIGNATURE_VERSION = get_setting('AWS_S3_SIGNATURE_VERSION', 's3v4')
AWS_S3_VERIFY = get_setting('AWS_S3_VERIFY', str(VERIFY_SSL), fxn=bool)
if AWS_S3_VERIFY:
    AWS_S3_VERIFY = CA_BUNDLE

BROKER_SCHEME = get_setting('BROKER_SCHEME', 'redis')
BROKER_HOST = get_setting('BROKER_HOST', 'localhost')
BROKER_PORT = get_setting('BROKER_PORT', '6379', fxn=int)
BROKER_USER = get_setting('BROKER_USER', '')
BROKER_PASSWORD = get_setting('BROKER_PASSWORD', 'foobared')

BROKER_URL_COMPONENTS = [
    f'{BROKER_SCHEME}', # 0-scheme
    f'{BROKER_USER}:{BROKER_PASSWORD}@{BROKER_HOST}:{BROKER_PORT}', # 1-netloc
    '', '', '', '' # 2-path, 3-params, 4-query, 5-fragment
]

CACHE_SCHEME = get_setting('CACHE_SCHEME', 'redis')
CACHE_HOST = get_setting('CACHE_HOST', 'localhost')
CACHE_PORT = get_setting('CACHE_PORT', '6379', fxn=int)
CACHE_TIMEOUT = get_setting('CACHE_TIMEOUT', '300')
CACHE_USER = get_setting('CACHE_USER', '')
CACHE_PASSWORD = get_setting('CACHE_PASSWORD', 'foobared')

CACHE_URL_COMPONENTS = [
    f'{CACHE_SCHEME}', # 0-scheme
    f'{CACHE_USER}:{CACHE_PASSWORD}@{CACHE_HOST}:{CACHE_PORT}', # 1-netloc
    '', '', '', '' # 2-path, 3-params, 4-query, 5-fragment
]

CELERY_BROKER_URL = urllib.parse.urlunparse(BROKER_URL_COMPONENTS)
cache_url_query_params = [
    f'socket_timeout={CACHE_TIMEOUT}'
]
broker_url_query_params = []
if USE_SSL and VERIFY_SSL:
    cache_url_query_params.extend([
        'ssl_cert_reqs=required',
        f'ssl_ca_certs={urllib.parse.quote(CA_BUNDLE, safe="")}'
    ])
    broker_url_query_params.extend([
        'ssl_cert_reqs=CERT_REQUIRED',
        f'ssl_ca_certs={urllib.parse.quote(CA_BUNDLE, safe="")}'
    ])
    CELERY_BROKER_USE_SSL = {
        'ssl_cert_reqs': ssl.CERT_REQUIRED,
        'ssl_ca_certs': CA_BUNDLE
    }
elif USE_SSL:
    cache_url_query_params.append('ssl_cert_reqs=none')
    broker_url_query_params.append('ssl_cert_reqs=CERT_NONE')
    CELERY_BROKER_USE_SSL = {'ssl_cert_reqs': ssl.CERT_NONE}
CACHE_URL_COMPONENTS[4] = '&'.join(cache_url_query_params)
CACHE_URL = urllib.parse.urlunparse(CACHE_URL_COMPONENTS)
BROKER_URL_COMPONENTS[4] = '&'.join(broker_url_query_params)
CELERY_RESULT_BACKEND = urllib.parse.urlunparse(BROKER_URL_COMPONENTS)
CELERY_TASK_COMPRESSION = 'gzip'
CELERY_RESULT_COMPRESSION = 'gzip'
CELERY_WORKER_CONCURRENCY = get_setting('WORKER_CONCURRENCY', '1', fxn=int)
CELERY_TASK_DEFAULT_QUEUE = get_setting('TASK_DEFAULT_QUEUE',
                                        'celery_{{ project_name }}')

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, '{{ project_name }}_cache'),
    },
    #'default': {
    #    'BACKEND': 'django_redis.cache.RedisCache',
    #    'LOCATION': CACHE_URL,
    #    'OPTIONS': {
    #        'CLIENT_CLASS': 'django_redis.client.DefaultClient',
    #        'COMPRESSOR': 'django_redis.compressors.lz4.Lz4Compressor',
    #    }
    #},
}
